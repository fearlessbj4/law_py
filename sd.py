n=2
def sd_2D(lst):#xy不可換算之前提
	if(len(lst)==0 or len(lst[0])!=2):#防呆
		return [[0,0],[0,0]]
	else:
		x=[lst[i][0] for i in range(len(lst))]
		y=[lst[i][1] for i in range(len(lst))]
		mx=sum(x)/len(lst)
		my=sum(y)/len(lst)
		vx=sum([(mx-lst[i][0])**2 for i in range(len(lst))])/len(lst)
		vy=sum([(my-lst[i][1])**2 for i in range(len(lst))])/len(lst)
		sdx=vx**0.5
		sdy=vy**0.5
		
		return [[mx,my],[sdx,sdy]]
def outlier_2D(lst):#平均±標準差*3
	global n
	lst_sd=sd_2D(lst)
	mx=lst_sd[0][0]
	my=lst_sd[0][1]
	sdx=lst_sd[1][0]
	sdy=lst_sd[1][1]
	new_xy=[]
	for i in range(len(lst)):
		if((lst[i][0]<=mx+sdx*n and lst[i][0]>=mx-sdx*n) 
			and (lst[i][1]<=my+sdy*n and lst[i][1]>=my-sdy*n)):
			new_xy.append(lst[i])
	return new_xy

def outlier_2D_2(lst):#中位數±(Q3-Q1)*1.5
	global n
	lst_x=sorted([lst[i][0] for i in range(len(lst))])
	lst_y=sorted([lst[i][1] for i in range(len(lst))])

	new_xy=[]
	Q2_x=(lst_x[int(len(lst)/2-1)]+lst_x[int(len(lst)/2)])/2 if len(lst)%2==0 else lst_x[int(len(lst)/2)]
	Q2_y=(lst_y[int(len(lst)/2-1)]+lst_y[int(len(lst)/2)])/2 if len(lst)%2==0 else lst_y[int(len(lst)/2)]

	Q1_x=(lst_x[int(len(lst)/4-1)]+lst_x[int(len(lst)/4)])/2 if len(lst)%4==0 else lst_x[int(len(lst)/4)]
	Q1_y=(lst_y[int(len(lst)/4-1)]+lst_y[int(len(lst)/4)])/2 if len(lst)%4==0 else lst_y[int(len(lst)/4)]

	Q3_x=(lst_x[int(len(lst)/4*3-1)]+lst_x[int(len(lst)/4*3)])/2 if len(lst)%4==0 else lst_y[int(len(lst)/4*3)]
	Q3_y=(lst_y[int(len(lst)/4*3-1)]+lst_y[int(len(lst)/4*3)])/2 if len(lst)%4==0 else lst_y[int(len(lst)/4*3)]
	
	qd_x=(Q3_x-Q1_x)/2
	qd_y=(Q3_y-Q1_y)/2


	
	print(Q1_x,Q1_y,Q2_y,Q3_x,Q3_y,qd_x,qd_y)
	for i in range(len(lst)):
		if((lst[i][0]<=Q3_x+qd_x*n and lst[i][0]>=Q1_x-qd_x*n) 
			and (lst[i][1]<=Q3_y+qd_y*n and lst[i][1]>=Q1_y-qd_y*n)):
			new_xy.append(lst[i])

	return new_xy
	"""
	new_xy=[]
	for i in range(len(lst)):
		if((lst[i][0]<=mx+sdx*3 and lst[i][0]>=mx-sdx*3) 
			and (lst[i][1]<=my+sdy*3 and lst[i][1]>=my-sdy*3)):
			new_xy.append(lst[i])
	return new_xy
	"""
def outlier_2D_3(lst):#中位數±(Q3-Q1)*1.5
	global n
	lst_xy=sorted([lst[i][1]/lst[i][0] for i in range(len(lst))])
	lst_x=sorted([lst[i][0] for i in range(len(lst))])
	lst_y=sorted([lst[i][1] for i in range(len(lst))])

	new_xy=[]
	Q2_xy=(lst_xy[int(len(lst)/2-1)]+lst_xy[int(len(lst)/2)])/2 if len(lst)%2==0 else lst_xy[int(len(lst)/2)]

	Q1_xy=(lst_xy[int(len(lst)/4-1)]+lst_xy[int(len(lst)/4)])/2 if len(lst)%4==0 else lst_xy[int(len(lst)/4)]

	Q3_xy=(lst_xy[int(len(lst)/4*3-1)]+lst_xy[int(len(lst)/4*3)])/2 if len(lst)%4==0 else lst_xy[int(len(lst)/4*3)]
	
	
	qd_xy=(Q3_xy-Q1_xy)/2
	


	print("%.4f,%.4f,%.4f"%(Q1_xy,Q2_xy,Q3_xy))
	#print(Q1_x,Q1_y,Q3_x,Q3_y,qd_x,qd_y)
	for i in range(len(lst)):
		if((lst[i][1]/lst[i][0]<=Q3_xy+qd_xy*n and lst[i][1]/lst[i][0]>=Q1_xy-qd_xy*n)):
			new_xy.append(lst[i])

	return new_xy
	"""
	new_xy=[]
	for i in range(len(lst)):
		if((lst[i][0]<=mx+sdx*3 and lst[i][0]>=mx-sdx*3) 
			and (lst[i][1]<=my+sdy*3 and lst[i][1]>=my-sdy*3)):
			new_xy.append(lst[i])
	return new_xy
	"""


#s=[[299, 20000], [674, 40000], [2125, 20000], [3500, 30000], [674, 40000], [492, 10000], [600, 30000], [18900, 120000], [500, 20000], [1200, 70000], [299, 10000], [3390, 40000], [1672, 30000], [222, 50000], [6354, 30000], [304, 60000], [13708, 50000], [1380, 40000], [792, 30000], [23000, 90000], [450, 30000], [816, 20000], [372, 5000], [800, 40000], [1308, 20000], [877, 6000], [273, 60000], [4304, 150000], [1315, 15000], [600000, 150000], [642, 14000], [8800, 210000], [1397, 40000], [20000, 20000], [717, 20000], [5337, 30000], [8418, 150000], [697, 20000], [5000, 20000], [1710, 20000], [3200, 20000], [99, 55000], [1675, 35000], [8860, 50000], [5000, 10000], [1300, 15000], [48300, 60000], [500, 40000], [1500, 180000], [23000, 55000], [1000, 32000], [5150, 30000], [20000, 20000], [63900, 90000], [1954, 25000], [3200, 15000], [4160, 50000], [250000, 65000], [18500, 20000], [1500, 20000], [10500, 60000], [7534, 55000], [6000, 20000], [3100, 150000], [350, 10000], [350, 10000], [1200, 20000], [400, 26000], [4800, 20000], [600, 20000], [500, 10000], [206, 30000], [1200, 55000], [3700, 30000], [810, 20000], [1990, 15000], [180, 10000], [50, 35000], [383, 10000], [1000, 40000], [1199, 5000], [1200, 60000], [299, 12000], [4853, 40000], [169, 120000], [169, 120000], [169, 120000], [8179, 60000], [299, 12000], [2507120, 180000], [50000, 240000], [14980, 40000], [500, 20000], [4890, 20000], [39, 5000], [2000, 15000], [394, 55000], [200000, 50000], [16400, 20000], [15000, 90000], [19000, 20000], [3458, 10000]]
#s=[[1,1],[2,2],[3,3],[4,4],[100,1000]]
#print(outlier_2D_2(s))
"""test
s=[[299, 20000], [674, 40000], [2125, 20000], [3500, 30000], [674, 40000], [492, 10000], [600, 30000], [18900, 120000], [500, 20000], [1200, 70000], [299, 10000], [3390, 40000], [1672, 30000], [222, 50000], [6354, 30000], [304, 60000], [13708, 50000], [1380, 40000], [792, 30000], [23000, 90000], [450, 30000], [816, 20000], [372, 5000], [800, 40000], [1308, 20000], [877, 6000], [273, 60000], [4304, 150000], [1315, 15000], [600000, 150000], [642, 14000], [8800, 210000], [1397, 40000], [20000, 20000], [717, 20000], [5337, 30000], [8418, 150000], [697, 20000], [5000, 20000], [1710, 20000], [3200, 20000], [99, 55000], [1675, 35000], [8860, 50000], [5000, 10000], [1300, 15000], [48300, 60000], [500, 40000], [1500, 180000], [23000, 55000], [1000, 32000], [5150, 30000], [20000, 20000], [63900, 90000], [1954, 25000], [3200, 15000], [4160, 50000], [250000, 65000], [18500, 20000], [1500, 20000], [10500, 60000], [7534, 55000], [6000, 20000], [3100, 150000], [350, 10000], [350, 10000], [1200, 20000], [400, 26000], [4800, 20000], [600, 20000], [500, 10000], [206, 30000], [1200, 55000], [3700, 30000], [810, 20000], [1990, 15000], [180, 10000], [50, 35000], [383, 10000], [1000, 40000], [1199, 5000], [1200, 60000], [299, 12000], [4853, 40000], [169, 120000], [169, 120000], [169, 120000], [8179, 60000], [299, 12000], [2507120, 180000], [50000, 240000], [14980, 40000], [500, 20000], [4890, 20000], [39, 5000], [2000, 15000], [394, 55000], [200000, 50000], [16400, 20000], [15000, 90000], [19000, 20000], [3458, 10000]]

#s=[[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[100,100]]

#print(sd_2D(s))
#a=outlier_2D(s,sd_2D(s)[0][0],sd_2D(s)[0][1],sd_2D(s)[1][0],sd_2D(s)[1][1])
a=outlier_2D_2(s)
print(len(s))
print(len(a))

print(len(a))
#"""

